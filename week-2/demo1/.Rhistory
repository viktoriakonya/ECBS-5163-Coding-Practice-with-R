m1
t(m1)
m1[1, 1]
m1[1, ]
m1[, 1]
m1[1, 1] <- 400
m1
m1[, 1] > 10
m1[, m1[, 1] > 10]
m1
m1[, m1[, 1] > 10]
m1 > 10
m1[m1 > 10]
m1[m1[1, ] %% 2 == 0, ]
m1[m1[1, ] %% 2 == 1, ]
which(m1 > 10)
m1[, which(m1 > 10)]
mean(v5)
apropos("mea")
x <- 3:1
x <- 3:1
y <- c(4, 8, 20)
z <- c("axolotl", "kék bálna", "tintahal")
df1 <- data.frame(x, y, z)
View(df1)
df1
df1 <- data.frame(Első = x, Második = y, Állatok = z)
df1 <- data.frame(Elso = x, Második = y, Állatok = z)
df1
nrow(df1)
ncol(df1)
dim(df1)
names(df1)
colnames(df1)
rownames(df1)
df1
names(df1)
rownames(df1) <- c("a", "b", "c")
df1
df2 <- data.frame(egyes = 1:10,
kettes = c("One", "Two", "Three",
"Four", "Five", "Six",
"Seven", "Eight", "Nine",
"Ten"))
View(df2)
df1[1:2, 3]
class(df1[1:2, 3])
df1[1:2, 3]
View(df1)
df1[c(1, 3), 3]
df2 <- data.frame(egyes = 1:10,
kettes = c("One", "Two", "Three",
"Four", "Five", "Six",
"Seven", "Eight", "Nine",
"Ten"))
f1[1:2, 3]
class(df1[1:2, 3])
class(df1[1:2, 2])
class(df1[1:2, 2])
View(df1)
df1[df1$Első == 1, ]
df1[df1$Elso == 1, ]
subset(df1, df1$Elso == 1)
df1_sub <- subset(df1, df1$Elso == 1)
df1_sub
v1 <- c(100, 300, 100)
cbind(df1, v1)
l2 <- list(4, 68, "axolotl")
rbind(df1, l2)
class(df1$Állatok)
df1$Állatok
c(df1$Állatok)
View(df1)
l1 <- list(1, 2, 3)
l1
list(c(1, 2, 3))
list(c(1, 2, 3), 3:7)
l2 <- list(df1, 1:ncol(df1), l1)
l2
View(l1)
l1[[2]]
length(l2)
names(l2) <- c("data_frame", "vector", "list")
names(l2)
l2
l2[[1]]
l2[["data_frame"]]
l2[[1]]$Állatok
l2[[2]]
l2[[4]] <- 2
l2[["new_element"]] <- 5:10
names(l2)
l2[[1]][1]
l2[[1]][1, 1]
z <- c(1, 2, NA, 8, 3, NA, 3)
z
z <- c(1, 2, NA, 8, 3, NA, 3)
z
is.na(z)
which(is.na(z))
mean(z)
mean(z, na.rm = T)
z <- c("narancs", NULL, "banán")
z
y <- NULL
is.null(y)
is.null(7)
if (!("devtools" %in% installed.packages())) {
install.packages(devtools)
}
devtools::install_github("tadaadata/loldata")
require(loldata)
got <- gameofthrones
View(got)
class(got$rating)
summary(got$rating)
got[which(got$season == 1),]
got[got$season == 1,]
got$first_aired <- as.Date(got$first_aired)
got[got$season > mean(got$season),]
mean <- mean(got$season)
got[got$season > mean(got$season)== 1, ]
got[got$season > mean(got$season)= 1, ]
got[got$season = 1, ]
got[got$season == 1, ]
mean <- mean(got$rating)
got[got$season == 1, ] > mean
mean_s1 <- mean(got$rating[got$season == 1, ])
mean_s1 <- mean(got[got$season == 1, ]$rating)
mean_all <- mean(got$rating)
mean_s1 > mean_all
s1_rating <- mean(got$rating[which(got$season == 1)])
s6_rating <- mean(got$rating[which(got$season == 6)])
s1_rating > s6_rating
got[which.max(nchar(got$overview)), c("season", "episode", "overview")]
got[nchar(got$overview) == max(nchar(got$overview)), ]
max <- max(nchar(got$overview))
got[nchar(got$overview) ==max, ]
got[nchar(got$overview) ==max, "season", "episode", "overview"]
got[nchar(got$overview) ==max, c("season", "episode", "overview")]
got[nchar(got$overview) == max(nchar(got$overview)), c("season", "episode", "overview")]
rankdata <- worldrankings
rankdata[is.na(rankdata$discrimination_index) = T, c("country")]
rankdata[is.na(rankdata$discrimination_index) == T, c("country")]
rankdata$country[which(is.na(rankdata$discrimination_index))]
rankdata[is.na(rankdata$discrimination_index), c("country")]
rankdata[is.na(rankdata$discrimination_index) == T, c("country")]
rankdata$country[which(is.na(rankdata$discrimination_index))]
nrow(rankdata$country[which(is.na(rankdata$discrimination_index))])
dim(rankdata$country[which(is.na(rankdata$discrimination_index))])
a <- rankdata$country[which(is.na(rankdata$discrimination_index))]
b <- rankdata[is.na(rankdata$discrimination_index) == T, c("country")]
View(b)
rankdata[country == "Hungary", ]$discrimination_index
View(rankdata)
rankdata[rankdata$country == "Hungary", ]$discrimination_index
is.na(rankdata[rankdata$country == "Hungary", ]$discrimination_index)
discr_na_countries <-
rankdata$country[which(is.na(rankdata$discrimination_index))]
"Hungary" %in% discr_na_countries
rankdata$discrimination_index[which(rankdata$country == "Hungary")]
which(rankdata$country[order(rankdata$discrimination_index)] == "Hungary")
install.packages("Rtools")
data()
data(iris)
head(iris)  # első 5 adat
data(package = "ggplot2") # milyen data set-jei vannak
data(diamonds)
head(diamonds)
setwd("C:/Users/User/Downloads/CEU/Other useful/Courses/Programozas/lesson_02/lesson_02")
iris_xlsx <- import(file = "data/iris_import/iris.xlsx")
if (!("rio" %in% installed.packages())) {
install.packages("rio")
}
library(rio)
iris_xlsx <- import(file = "data/iris_import/iris.xlsx")
View(iris_xlsx)
iris_sav <- import(file = "data/iris_import/iris.sav")
iris_dta <- import(file = "data/iris_import/iris.dta")
if (!("RSQLite" %in% installed.packages())) {
install.packages("RSQLite")
}
library("RSQLite")
install.packages("RSQLite")
RSQLite::SQLite()
drv <- SQLite()
con <- dbConnect(drv, dbname = "data/iris_import/iris.sqlite")
library("RSQLite")
RSQLite::SQLite()
drv <- SQLite()
con <- dbConnect(drv, dbname = "data/iris_import/iris.sqlite")
tables <- dbListTables(con)
iris_sqlite <- dbGetQuery(con, 'select * from Iris')
head(iris_sqlite)
setosa <-
dbGetQuery(con, "SELECT * from Iris WHERE Species == 'Iris-setosa'")
setosa
dbDisconnect(con)
save(setosa, file = "data/iris_export/setosa.rdata")
load("data/iris_export/setosa.rdata")
rdata <- load("data/iris_export/setosa.rdata")
head(setosa)
data("Loblolly")
View(Loblolly)
View(Loblolly)
loblolly[loblolly$height == max(loblolly$height), ]$seed
Loblolly[Loblolly$height == max(Loblolly$height), ]$seed
max_height <- max(Loblolly$height)
Loblolly[Loblolly$height == max(Loblolly$height), ]$Seed
Loblolly[Loblolly$height == max(Loblolly$height), "Seed"]
Loblolly$Seed[which.max(Loblolly$height)] # ez a jó
Loblolly[Loblolly$age >= 15 & Loblolly$height == max(Loblolly[Loblolly$age >= 15]$height), "Seed"]
subset(Lolloby, age >= 15)
subset(Loblolly, age >= 15)
subset(Loblolly, age >= 15)$height
max(subset(Loblolly, age >= 15)$height)
max_height <- Loblolly[Loblolly$age >= 15]$height
max_height <- Loblolly[Loblolly$age >= 15]$height
max_height <- Loblolly[Loblolly$age >= 15]$height
Loblolly[Loblolly$age >= 15 & Loblolly$height == max(Loblolly[Loblolly$age >= 15]$height), "Seed"]
Loblolly[Loblolly$age >= 15 & Loblolly$height == max_height, "Seed"]
Loblolly[Loblolly$age == 15 & Loblolly$height == max_height, "Seed"]
Loblolly15 <- subset(Loblolly, age==15)
Loblolly15$Seed[which.max(Loblolly15$height)]
credit <-
read.table(
file = "data/assignments/credit.csv",
header = T,
sep = ",",
dec = ".",
fileEncoding = "utf-8"
)
View(credit)
credit[credit$credit_histoy == 'critical']
credit[credit$credit_histoy == 'critical', ]
summary(credit[credit$credit_histoy == 'critical', ])
summary(credit[credit$credit_histoy == 'critical', "purpose"])
summary(credit[credit$credit_histoy == 'critical', ]$purpose)
summary(credit[credit$credit_histoy == 'critical', ]$purpose, decreasing = T)
summary(credit[credit$credit_histoy == "critical", ]$purpose, decreasing = T)
sort(summary(credit_critical$purpose), decreasing=T) # egyedi értékek eloszlása, sorba rakás
credit_critical <- subset(credit, credit_history=="critical")
sort(summary(credit_critical$purpose), decreasing=T) # egyedi értékek eloszlása, sorba rakás
summary(credit[credit$credit_histoy == "critical", ]$purpose, decreasing = T)
sort(summary(credit[credit$credit_histoy == "critical", ]$purpose), decreasing = T)
sort(summary(credit[credit$credit_histoy == "critical", ]$purpose), decreasing = T)
credit[credit$credit_histoy == "critical", ]$purpose
summary(credit[credit$credit_histoy == "critical", ]$purpose)
credit[credit$credit_histoy == "critical", ]
credit[credit$credit_histoy == "critical", purpose]
credit_critical <- subset(credit, credit_history=="critical")
View(credit_critical)
sort(summary(credit_critical$purpose), decreasing=T) # egyedi értékek eloszlása, sorba rakás
credit$purpose[credit$credit_history=="critical"]
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
v <- credit$purpose[credit$credit_history=="critical"]
result <- getmode(v)
print(result)
perf <- subset(credit, credit_history=="perfect")
summary(perf$purpose)
sort(summary(perf$purpose), desc = TRUE)
sort(summary(perf$purpose), decreasing =  = TRUE)
sort(summary(perf$purpose), decreasing = TRUE)
names(sort(summary(credit_critical$purpose), decreasing=T))[1]
sms <-
read.delim2(
file = "data/assignments/sms_spam.tsv",
header = T,
sep = "\t",
dec = ".",
fileEncoding = "utf-8",
stringAsFactors=F
)
sms <-
read.delim2(
file = "data/assignments/sms_spam.tsv",
header = T,
sep = "\t",
dec = ".",
fileEncoding = "utf-8",
stringAsFactors=F
)
sms$type <- as.factor(sms$type)
sms$text <- as.factor(sms$text)
sms <-
read.delim2(
file = "data/assignments/sms_spam.tsv",
header = T,
sep = "\t",
dec = ".",
fileEncoding = "utf-8",
stringAsFactors=F
)
sms <-
read.delim2(
file = "data/assignments/sms_spam.tsv",
header = T,
sep = "\t",
dec = ".",
fileEncoding = "utf-8",
stringAsFactors=F
)
sms <-
read.delim2(
file = "data/assignments/sms_spam.tsv",
header = T,
sep = "\t",
dec = ".",
fileEncoding = "utf-8"
)
sms$type <- as.factor(sms$type)
sms$text <- as.factor(sms$text)
View(sms)
sms$text <- as.character(sms$text)
View(sms)
avg(length(sms$type))
mean(length(sms$type))
red <- import(file="data/assignments/redwines.xlsx")
white <- import(file="data/assignments/whitewines.xlsx")
library(rio)
red <- import(file="data/assignments/redwines.xlsx")
white <- import(file="data/assignments/whitewines.xlsx")
View(red)
red$type <- as.factor("red")
white$type <- as.factor("white")
wines <- rbind(red, white)
View(white)
View(wines)
mean(wines$fixed_acidity[wines$type], )
mean(wines$fixed_acidity[wines$type, ])
mean(wines[wines$type, "fixed_acidity"])
mean(wines[wines$type == "Red", "fixed_acidity"])
wines[wines$type == "Red", "fixed_acidity"]
mean(wines[wines$type == "Red", ])
mean(subset(wines, type == "Red")$fixed_acidity)
mean(subset(wines, type ="Red")$fixed_acidity)
subset(wines, type=="red")$fixed_acidity
mean(subset(wines, type=="red")$fixed_acidity) > mean(subset(wines, type=="white")$fixed_acidity)
mean(subset(wines, type=="red")$fixed_acidity)
mean(subset(wines, type=="red")$fixed_acidity, na.rm=T) > mean(subset(wines, type=="white")$fixed_acidity, na.rm=T)
mean(subset(wines, type=="red")$fixed_acidity, na.rm=T)
mean(subset(wines, type=="red")$fixed_acidity, na.rm=T)>mean(subset(wines, type=="white")$fixed_acidity, na.rm=T)
mean(subset(wines, type ="Red")$fixed_acidity)
mean(subset(wines, type ="Red")$fixed_acidity, na.rm=T)
subset(wines, type ="Red")$fixed_acidity
mean(subset(wines, type ="Red")$fixed_acidity, na.rm=T)
wines$fixed_acidity <- as.numeric(wines$fixed_acidity)
mean(subset(wines, type=="red")$fixed_acidity, na.rm=T) > mean(subset(wines, type=="white")$fixed_acidity, na.rm=T)
mean(subset(wines, type=="red")$fixed_acidity, na.rm=T)
setwd("C:/Users/User/Downloads/CEU/Other useful/Courses/Programozas/lesson-03")
source("src/prog1_lesson03_part01_functions.R")
source("src/prog1_lesson03_part01_functions2.R")
say_hello()
say_hello_v1()
exponent(x = 2, y = 3)
# argumentumok megadása név nélkül, pozíció szerint
exponent(2, 3)
exponent(x = 2)
exponent_v1(2, 4)
exponent_v2(2, 4)
formals(exponent)
body(exponent)
environment(exponent)
sample(mtcars$mpg, 10)
greet_person <- function (name, greet) {
paste0(greet, " ", name, "!")
}
greet_person("Szia", "Viki")
greet_person <- function (greet = "Hello", name = "Viki") {
paste0(greet, " ", name, "!")
}
greet_person("Szia", "Viki")
greet_person <- function(greeting="Hello", name="Word") {
# kiprinteli az argumentumokat “greeting, name!!!” köszöntés formájában
# A greeting default értéke legyen “Hello”, a name default értéke “World”
print(paste0(greeting, ", " , name, "!!!"))
}
greet_person()
greet_person_random <- function () {
name <- c ("Viki", "Bence")
greet <- c("Hello", "Szevasz")
paste0(sample(greet, 1), " ", sample(name, 1), "!")
}
greet_person_random()
greet_person_random()
greet_person_random()
greet_person_random()
set.seed(1000)
greet_person_random()
set.seed(1000)
greet_person_random()
set.seed(1000)
greet_person_random()
set.seed(1000)
greet_person_random()
set.seed(1000)
greet_person_random()
set.seed(1000)
greet_person_random()
set.seed(1000)
greet_person_random()
set.seed(1000)
greet_person_random()
set.seed(1000)
greet_person_random()
set.seed(1000)
greet_person_random()
set.seed(1000)
greet_person_random()
set.seed(1000)
greet_person_random()
set.seed(1000)
greet_person_random()
set.seed(1000)
greet_person_random()
greet_person_random <- function(greeting, name) {
# kiprinteli az argumentumokat “greeting, name!” köszöntés formájában, random vektorból
# A greeting default értéke legyen “Hello”, a name default értéke “World”
greeting <- c("Hello", "Hi", "Good morning", "Yo", "Whattup", "How’s it goin’", "Hey, Goodbye")
name <- c("World", "Mom, Miss Crabtree", "Adrian", "G", "Dude", "Jude", "Mr. Chips")
print(paste0(sample(greeting,1), ", " , sample(name,1 ), "!"))
}
greet_person_random()
mtcars[1]
mtcars[[1]]
mtcars$mpg[[1]]
mtcars$mpg[1]
require(fivethirtyeight)
data("tarantino")
View(tarantino)
if (number == 1) {
print("Ez valóban 1.")
}
source("src/prog1_lesson04_part01_Elagazasok_es_ciklusok_functions.R")
setwd("C:/Users/User/Downloads/CEU/Other useful/Courses/Programozas/lesson-04/lesson-04/src")
source("src/prog1_lesson04_part01_Elagazasok_es_ciklusok_functions.R")
setwd("C:/Users/User/Downloads/CEU/Other useful/Courses/Programozas/lesson-04")
source("src/prog1_lesson04_part01_Elagazasok_es_ciklusok_functions.R")
setwd("C:/Users/User/Downloads/CEU/Other useful/Courses/Programozas/lesson-04/lesson-04")
source("src/prog1_lesson04_part01_Elagazasok_es_ciklusok_functions.R")
number <- 1
if (number == 1) {
print("Ez valóban 1.")
}
for (i in 1:10) {
print(i)
}
df <- data.frame(numbers = 1:5, letters = c("a", "b", "c", "d", "e"),
stringsAsFactors = F)
View(df)
x <- 1
while (x <= 10) {
print(x)
x <- x + 1
}
library(MASS)
chisq.test(szo_halal)
tarantino$profane <- factor(tarantino$profane,
levels = c(TRUE, FALSE),
labels = c("szitokszó", "halál"))
szo_halal <- table(tarantino$decade,tarantino$profane)
szo_halal
tarantino$year[which(tarantino$movie == "Reservoir Dogs")] <- 1992
tarantino$year[which(tarantino$movie == "Pulp Fiction")] <- 1994
tarantino$year[which(tarantino$movie == "Kill Bill: Vol. 1")] <- 2003
tarantino$year[which(tarantino$movie == "Kill Bill: Vol. 2")] <- 2004
tarantino$year[which(tarantino$movie == "Jackie Brown")] <- 1997
tarantino$year[which(tarantino$movie == "Inglorious Basterds")] <- 2009
tarantino$year[which(tarantino$movie == "Django Unchained")] <- 2012
library(fivethirtyeight)
install.packages("fivethirtyeight")
library(fivethirtyeight)
m <- matrix(rnorm(20), 10, 2)
View(m)
df <- data.frame(booleans = c(TRUE, FALSE, TRUE), letters = c("a", "b", "b"),
stringsAsFactors = FALSE)
View(df)
olist_order_reviews_dataset= read.csv("C:/Users/User/Downloads/CEU/2021_Fall/DE1/HW1/Brazilian_e_commerce_orders_imported/olist_order_reviews_dataset.csv")
View(olist_order_reviews_dataset)
olist_order_reviews_dataset[order_id = "f63f9a7699e3674c80a4ba92e56dfbb8", ]
olist_order_reviews_dataset[order_id == "f63f9a7699e3674c80a4ba92e56dfbb8", ]
subset(olist_order_reviews_dataset, order_id == "f63f9a7699e3674c80a4ba92e56dfbb8")
a <- subset(olist_order_reviews_dataset, order_id == "f63f9a7699e3674c80a4ba92e56dfbb8")
View(a)
olist_order_reviews_dataset <- read.csv("C:/Users/User/Downloads/CEU/2021_Fall/DE1/HW1/Brazilian_e_commerce_orders_imported/olist_order_reviews_dataset.csv")
View(olist_order_reviews_dataset)
olist_order_reviews_dataset= read.csv("C:/Users/User/Downloads/CEU/2021_Fall/DE1/HW1/Brazilian_e_commerce_orders_imported/olist_order_reviews_dataset.csv", encoding = "UTF-8")
View(olist_order_reviews_dataset)
write.table(olist_order_reviews_dataset, file = "C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/olist_order_reviews_dataset_mod.csv", sep = ",", row.names = F,
fileEncoding = "utf-8")
write.table(olist_order_reviews_dataset, file = "C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/olist_order_reviews_dataset_mod.csv", sep = ",", row.names = F,
fileEncoding = "utf-8", eol = "\n")
write.table(olist_order_reviews_dataset, file = "C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/olist_order_reviews_dataset_mod.csv", sep = ",", row.names = F,
fileEncoding = "utf-8", eol = "\n")
write.table(olist_order_reviews_dataset, file = "C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/olist_order_reviews_dataset_mod.csv", sep = ",", row.names = F,
fileEncoding = "utf-8", eol = "\n")
a <- subset(olist_order_reviews_dataset, order_id == "f63f9a7699e3674c80a4ba92e56dfbb8")
View(a)
View(a)
a <- subset(olist_order_reviews_dataset, review_id == "f63f9a7699e3674c80a4ba92e56dfbb8")
View(a)
max <- max(length(olist_order_reviews_dataset$order_id))
olist_order_reviews_dataset[olist_order_reviews_dataset$order_id == max, ]
b<- olist_order_reviews_dataset[olist_order_reviews_dataset$order_id == max, ]
View(b)
b<- olist_order_reviews_dataset[length(olist_order_reviews_dataset$order_id) == max, ]
View(b)
write.table(olist_order_reviews_dataset, file = "C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/olist_order_reviews_dataset_mod.csv", sep = ";", row.names = F,
fileEncoding = "utf-8", na = "",eol = "\n")
